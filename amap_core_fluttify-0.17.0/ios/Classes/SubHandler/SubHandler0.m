//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler0.h"
#import "FluttifyMessageCodec.h"
#import <AMapFoundationKit/AMapFoundationKit.h>

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSString*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapCoreFluttifyPlugin (SubHandler0)
- (NSDictionary<NSString*, Handler>*) getSubHandler0 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"AMapURLSearch::getLatestAMapApp": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::getLatestAMapApp(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            [AMapURLSearch getLatestAMapApp];
        
            // result
            // 无返回值
            NSString* __result__ = @"success";
        
            methodResult(__result__);
        },
        @"AMapURLSearch::openAMapNavigation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::openAMapNavigation(%@)", args);
            }
        
            // args
            // ref arg
            AMapNaviConfig* config = (AMapNaviConfig*) (args[@"config"] == [NSNull null] ? nil : args[@"config"]);
        
            // ref
        
        
            // invoke native method
            BOOL result = [AMapURLSearch openAMapNavigation: config];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"AMapURLSearch::openAMapRouteSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::openAMapRouteSearch(%@)", args);
            }
        
            // args
            // ref arg
            AMapRouteConfig* config = (AMapRouteConfig*) (args[@"config"] == [NSNull null] ? nil : args[@"config"]);
        
            // ref
        
        
            // invoke native method
            BOOL result = [AMapURLSearch openAMapRouteSearch: config];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"AMapURLSearch::openAMapPOISearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::openAMapPOISearch(%@)", args);
            }
        
            // args
            // ref arg
            AMapPOIConfig* config = (AMapPOIConfig*) (args[@"config"] == [NSNull null] ? nil : args[@"config"]);
        
            // ref
        
        
            // invoke native method
            BOOL result = [AMapURLSearch openAMapPOISearch: config];
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        @"AMapServices::sharedServices": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapServices::sharedServices(%@)", args);
            }
        
            // args
        
        
            // ref
        
        
            // invoke native method
            AMapServices* result = [AMapServices sharedServices];
        
            // result
            // return a ref
            NSObject* __result__ = result;
        
            methodResult(__result__);
        },
        @"AMapURLSearch::getLatestAMapApp_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::getLatestAMapApp(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                [AMapURLSearch getLatestAMapApp];
        
                // result
                // 无返回值
                NSString* __result__ = @"success";
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"AMapURLSearch::openAMapNavigation_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::openAMapNavigation(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                AMapNaviConfig* config = (AMapNaviConfig*) (args[@"config"] == [NSNull null] ? nil : args[@"config"]);
        
                // ref
        
        
                // invoke native method
                BOOL result = [AMapURLSearch openAMapNavigation: config];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"AMapURLSearch::openAMapRouteSearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::openAMapRouteSearch(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                AMapRouteConfig* config = (AMapRouteConfig*) (args[@"config"] == [NSNull null] ? nil : args[@"config"]);
        
                // ref
        
        
                // invoke native method
                BOOL result = [AMapURLSearch openAMapRouteSearch: config];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"AMapURLSearch::openAMapPOISearch_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapURLSearch::openAMapPOISearch(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // ref arg
                AMapPOIConfig* config = (AMapPOIConfig*) (args[@"config"] == [NSNull null] ? nil : args[@"config"]);
        
                // ref
        
        
                // invoke native method
                BOOL result = [AMapURLSearch openAMapPOISearch: config];
        
                // result
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"AMapServices::sharedServices_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapServices::sharedServices(%@)", argsBatch);
            }
        
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
        
        
                // ref
        
        
                // invoke native method
                AMapServices* result = [AMapServices sharedServices];
        
                // result
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        @"AMapNaviConfig::get_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::get_appScheme");
            }
        
            // ref object
            AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSString* result = ref.appScheme;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"AMapNaviConfig::get_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::get_appName");
            }
        
            // ref object
            AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSString* result = ref.appName;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"AMapNaviConfig::get_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::get_destination");
            }
        
            // ref object
            AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            CLLocationCoordinate2D result = ref.destination;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"AMapNaviConfig::get_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::get_strategy");
            }
        
            // ref object
            AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            AMapDrivingStrategy result = ref.strategy;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"AMapRouteConfig::get_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_appScheme");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSString* result = ref.appScheme;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"AMapRouteConfig::get_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_appName");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSString* result = ref.appName;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"AMapRouteConfig::get_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_startCoordinate");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            CLLocationCoordinate2D result = ref.startCoordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"AMapRouteConfig::get_destinationCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_destinationCoordinate");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            CLLocationCoordinate2D result = ref.destinationCoordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"AMapRouteConfig::get_drivingStrategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_drivingStrategy");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            AMapDrivingStrategy result = ref.drivingStrategy;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"AMapRouteConfig::get_transitStrategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_transitStrategy");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            AMapTransitStrategy result = ref.transitStrategy;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"AMapRouteConfig::get_routeType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::get_routeType");
            }
        
            // ref object
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            AMapRouteSearchType result = ref.routeType;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"AMapPOIConfig::get_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::get_appScheme");
            }
        
            // ref object
            AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSString* result = ref.appScheme;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"AMapPOIConfig::get_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::get_appName");
            }
        
            // ref object
            AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSString* result = ref.appName;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"AMapPOIConfig::get_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::get_keywords");
            }
        
            // ref object
            AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSString* result = ref.keywords;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"AMapPOIConfig::get_leftTopCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::get_leftTopCoordinate");
            }
        
            // ref object
            AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            CLLocationCoordinate2D result = ref.leftTopCoordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"AMapPOIConfig::get_rightBottomCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::get_rightBottomCoordinate");
            }
        
            // ref object
            AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            CLLocationCoordinate2D result = ref.rightBottomCoordinate;
        
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        
        @"AMapServices::get_apiKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::get_apiKey");
            }
        
            // ref object
            AMapServices* ref = (AMapServices*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSString* result = ref.apiKey;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"AMapServices::get_enableHTTPS": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::get_enableHTTPS");
            }
        
            // ref object
            AMapServices* ref = (AMapServices*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            BOOL result = ref.enableHTTPS;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"AMapServices::get_crashReportEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::get_crashReportEnabled");
            }
        
            // ref object
            AMapServices* ref = (AMapServices*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            BOOL result = ref.crashReportEnabled;
        
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
        
        @"AMapServices::get_identifier": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::get_identifier");
            }
        
            // ref object
            AMapServices* ref = (AMapServices*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            // invoke native method
            NSString* result = ref.identifier;
        
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        
        @"AMapNaviConfig::get_appScheme_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.appScheme;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNaviConfig::get_appName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.appName;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNaviConfig::get_destination_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                CLLocationCoordinate2D result = ref.destination;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNaviConfig::get_strategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                AMapDrivingStrategy result = ref.strategy;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_appScheme_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.appScheme;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_appName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.appName;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_startCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                CLLocationCoordinate2D result = ref.startCoordinate;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_destinationCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                CLLocationCoordinate2D result = ref.destinationCoordinate;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_drivingStrategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                AMapDrivingStrategy result = ref.drivingStrategy;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_transitStrategy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                AMapTransitStrategy result = ref.transitStrategy;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapRouteConfig::get_routeType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                AMapRouteSearchType result = ref.routeType;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIConfig::get_appScheme_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.appScheme;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIConfig::get_appName_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.appName;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIConfig::get_keywords_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.keywords;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIConfig::get_leftTopCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                CLLocationCoordinate2D result = ref.leftTopCoordinate;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapPOIConfig::get_rightBottomCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                CLLocationCoordinate2D result = ref.rightBottomCoordinate;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapServices::get_apiKey_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapServices* ref = (AMapServices*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.apiKey;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapServices::get_enableHTTPS_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapServices* ref = (AMapServices*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                BOOL result = ref.enableHTTPS;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapServices::get_crashReportEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapServices* ref = (AMapServices*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                BOOL result = ref.crashReportEnabled;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapServices::get_identifier_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                AMapServices* ref = (AMapServices*) args[@"__this__"];
                // 批处理过程中出现nil引用则直接添加nil进结果列表, 然后进行下一次循环
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    [resultList addObject: [NSNull null]];
                    continue;
                }
        
                NSString* result = ref.identifier;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__ == nil ? [NSNull null] : __result__];
            }
        
            methodResult(resultList);
        },
        
        @"AMapNaviConfig::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::set_appName");
            }
        
            // args
            // jsonable arg
            NSString* appName = (NSString*) args[@"appName"];
        
            // ref
            AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appName = appName;
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_destination": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::set_destination");
            }
        
            // args
            // struct arg
            NSValue* destinationValue = (NSValue*) args[@"destination"];
            CLLocationCoordinate2D destination;
            if (destinationValue != nil && (NSNull*) destinationValue != [NSNull null]) {
              [destinationValue getValue:&destination];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"destination不能为null"]);
              return;
            }
        
        
            // ref
            AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.destination = destination;
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_strategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapNaviConfig::set_strategy");
            }
        
            // args
            // enum arg
            AMapDrivingStrategy strategy = (AMapDrivingStrategy) [args[@"strategy"] integerValue];
        
            // ref
            AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.strategy = strategy;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_appName");
            }
        
            // args
            // jsonable arg
            NSString* appName = (NSString*) args[@"appName"];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appName = appName;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_startCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_startCoordinate");
            }
        
            // args
            // struct arg
            NSValue* startCoordinateValue = (NSValue*) args[@"startCoordinate"];
            CLLocationCoordinate2D startCoordinate;
            if (startCoordinateValue != nil && (NSNull*) startCoordinateValue != [NSNull null]) {
              [startCoordinateValue getValue:&startCoordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"startCoordinate不能为null"]);
              return;
            }
        
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.startCoordinate = startCoordinate;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_destinationCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_destinationCoordinate");
            }
        
            // args
            // struct arg
            NSValue* destinationCoordinateValue = (NSValue*) args[@"destinationCoordinate"];
            CLLocationCoordinate2D destinationCoordinate;
            if (destinationCoordinateValue != nil && (NSNull*) destinationCoordinateValue != [NSNull null]) {
              [destinationCoordinateValue getValue:&destinationCoordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"destinationCoordinate不能为null"]);
              return;
            }
        
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.destinationCoordinate = destinationCoordinate;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_drivingStrategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_drivingStrategy");
            }
        
            // args
            // enum arg
            AMapDrivingStrategy drivingStrategy = (AMapDrivingStrategy) [args[@"drivingStrategy"] integerValue];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.drivingStrategy = drivingStrategy;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_transitStrategy": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_transitStrategy");
            }
        
            // args
            // enum arg
            AMapTransitStrategy transitStrategy = (AMapTransitStrategy) [args[@"transitStrategy"] integerValue];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.transitStrategy = transitStrategy;
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_routeType": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapRouteConfig::set_routeType");
            }
        
            // args
            // enum arg
            AMapRouteSearchType routeType = (AMapRouteSearchType) [args[@"routeType"] integerValue];
        
            // ref
            AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.routeType = routeType;
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_appScheme": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::set_appScheme");
            }
        
            // args
            // jsonable arg
            NSString* appScheme = (NSString*) args[@"appScheme"];
        
            // ref
            AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appScheme = appScheme;
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_appName": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::set_appName");
            }
        
            // args
            // jsonable arg
            NSString* appName = (NSString*) args[@"appName"];
        
            // ref
            AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.appName = appName;
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_keywords": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::set_keywords");
            }
        
            // args
            // jsonable arg
            NSString* keywords = (NSString*) args[@"keywords"];
        
            // ref
            AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.keywords = keywords;
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_leftTopCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::set_leftTopCoordinate");
            }
        
            // args
            // struct arg
            NSValue* leftTopCoordinateValue = (NSValue*) args[@"leftTopCoordinate"];
            CLLocationCoordinate2D leftTopCoordinate;
            if (leftTopCoordinateValue != nil && (NSNull*) leftTopCoordinateValue != [NSNull null]) {
              [leftTopCoordinateValue getValue:&leftTopCoordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"leftTopCoordinate不能为null"]);
              return;
            }
        
        
            // ref
            AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.leftTopCoordinate = leftTopCoordinate;
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_rightBottomCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapPOIConfig::set_rightBottomCoordinate");
            }
        
            // args
            // struct arg
            NSValue* rightBottomCoordinateValue = (NSValue*) args[@"rightBottomCoordinate"];
            CLLocationCoordinate2D rightBottomCoordinate;
            if (rightBottomCoordinateValue != nil && (NSNull*) rightBottomCoordinateValue != [NSNull null]) {
              [rightBottomCoordinateValue getValue:&rightBottomCoordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"rightBottomCoordinate不能为null"]);
              return;
            }
        
        
            // ref
            AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.rightBottomCoordinate = rightBottomCoordinate;
            methodResult(@"success");
        },
        
        @"AMapServices::set_apiKey": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::set_apiKey");
            }
        
            // args
            // jsonable arg
            NSString* apiKey = (NSString*) args[@"apiKey"];
        
            // ref
            AMapServices* ref = (AMapServices*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.apiKey = apiKey;
            methodResult(@"success");
        },
        
        @"AMapServices::set_enableHTTPS": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::set_enableHTTPS");
            }
        
            // args
            // jsonable arg
            BOOL enableHTTPS = [args[@"enableHTTPS"] boolValue];
        
            // ref
            AMapServices* ref = (AMapServices*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.enableHTTPS = enableHTTPS;
            methodResult(@"success");
        },
        
        @"AMapServices::set_crashReportEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"AMapServices::set_crashReportEnabled");
            }
        
            // args
            // jsonable arg
            BOOL crashReportEnabled = [args[@"crashReportEnabled"] boolValue];
        
            // ref
            AMapServices* ref = (AMapServices*) args[@"__this__"];
            if ((NSNull *) ref == [NSNull null] || ref == nil) {
                methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                return;
            }
        
            ref.crashReportEnabled = crashReportEnabled;
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.appScheme = appScheme;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_appName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appName = (NSString*) args[@"appName"];
        
                // ref
                AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.appName = appName;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_destination_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* destinationValue = (NSValue*) args[@"destination"];
                CLLocationCoordinate2D destination;
                if (destinationValue != nil && (NSNull*) destinationValue != [NSNull null]) {
                  [destinationValue getValue:&destination];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"destination不能为null"]);
                  return;
                }
        
        
                // ref
                AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.destination = destination;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapNaviConfig::set_strategy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapDrivingStrategy strategy = (AMapDrivingStrategy) [args[@"strategy"] integerValue];
        
                // ref
                AMapNaviConfig* ref = (AMapNaviConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.strategy = strategy;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.appScheme = appScheme;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_appName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appName = (NSString*) args[@"appName"];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.appName = appName;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_startCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* startCoordinateValue = (NSValue*) args[@"startCoordinate"];
                CLLocationCoordinate2D startCoordinate;
                if (startCoordinateValue != nil && (NSNull*) startCoordinateValue != [NSNull null]) {
                  [startCoordinateValue getValue:&startCoordinate];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"startCoordinate不能为null"]);
                  return;
                }
        
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.startCoordinate = startCoordinate;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_destinationCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* destinationCoordinateValue = (NSValue*) args[@"destinationCoordinate"];
                CLLocationCoordinate2D destinationCoordinate;
                if (destinationCoordinateValue != nil && (NSNull*) destinationCoordinateValue != [NSNull null]) {
                  [destinationCoordinateValue getValue:&destinationCoordinate];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"destinationCoordinate不能为null"]);
                  return;
                }
        
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.destinationCoordinate = destinationCoordinate;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_drivingStrategy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapDrivingStrategy drivingStrategy = (AMapDrivingStrategy) [args[@"drivingStrategy"] integerValue];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.drivingStrategy = drivingStrategy;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_transitStrategy_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapTransitStrategy transitStrategy = (AMapTransitStrategy) [args[@"transitStrategy"] integerValue];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.transitStrategy = transitStrategy;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapRouteConfig::set_routeType_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // enum arg
                AMapRouteSearchType routeType = (AMapRouteSearchType) [args[@"routeType"] integerValue];
        
                // ref
                AMapRouteConfig* ref = (AMapRouteConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.routeType = routeType;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_appScheme_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appScheme = (NSString*) args[@"appScheme"];
        
                // ref
                AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.appScheme = appScheme;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_appName_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* appName = (NSString*) args[@"appName"];
        
                // ref
                AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.appName = appName;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_keywords_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* keywords = (NSString*) args[@"keywords"];
        
                // ref
                AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.keywords = keywords;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_leftTopCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* leftTopCoordinateValue = (NSValue*) args[@"leftTopCoordinate"];
                CLLocationCoordinate2D leftTopCoordinate;
                if (leftTopCoordinateValue != nil && (NSNull*) leftTopCoordinateValue != [NSNull null]) {
                  [leftTopCoordinateValue getValue:&leftTopCoordinate];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"leftTopCoordinate不能为null"]);
                  return;
                }
        
        
                // ref
                AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.leftTopCoordinate = leftTopCoordinate;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapPOIConfig::set_rightBottomCoordinate_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // struct arg
                NSValue* rightBottomCoordinateValue = (NSValue*) args[@"rightBottomCoordinate"];
                CLLocationCoordinate2D rightBottomCoordinate;
                if (rightBottomCoordinateValue != nil && (NSNull*) rightBottomCoordinateValue != [NSNull null]) {
                  [rightBottomCoordinateValue getValue:&rightBottomCoordinate];
                } else {
                  methodResult([FlutterError errorWithCode:@"参数非法"
                                                   message:@"参数非法"
                                                   details:@"rightBottomCoordinate不能为null"]);
                  return;
                }
        
        
                // ref
                AMapPOIConfig* ref = (AMapPOIConfig*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.rightBottomCoordinate = rightBottomCoordinate;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapServices::set_apiKey_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                NSString* apiKey = (NSString*) args[@"apiKey"];
        
                // ref
                AMapServices* ref = (AMapServices*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.apiKey = apiKey;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapServices::set_enableHTTPS_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL enableHTTPS = [args[@"enableHTTPS"] boolValue];
        
                // ref
                AMapServices* ref = (AMapServices*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.enableHTTPS = enableHTTPS;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"AMapServices::set_crashReportEnabled_batch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            for (NSUInteger __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // args
                // jsonable arg
                BOOL crashReportEnabled = [args[@"crashReportEnabled"] boolValue];
        
                // ref
                AMapServices* ref = (AMapServices*) args[@"__this__"];
                if ((NSNull *) ref == [NSNull null] || ref == nil) {
                    methodResult([FlutterError errorWithCode:@"目标对象为nil" message:@"目标对象为nil" details:@"目标对象为nil"]);
                    return;
                }
        
                ref.crashReportEnabled = crashReportEnabled;;
                methodResult(@"success");
            }
        
            methodResult(@"success");
        },
        
        @"RefClass::isKindOfAMapURLSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapURLSearch class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapNaviConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapNaviConfig class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapRouteConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapRouteConfig class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapPOIConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapPOIConfig class]];
            methodResult(@(isTargetType));
        },
        
        @"RefClass::isKindOfAMapServices": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // 引用对象
            NSObject* __this__ = ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
        
            BOOL isTargetType = [__this__ isKindOfClass:[AMapServices class]];
            methodResult(@(isTargetType));
        },
        
        @"ObjectFactory::createAMapURLSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapURLSearch");
            }
        
            AMapURLSearch* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[AMapURLSearch alloc] init];
            } else {
                __this__ = [AMapURLSearch alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapNaviConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapNaviConfig");
            }
        
            AMapNaviConfig* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[AMapNaviConfig alloc] init];
            } else {
                __this__ = [AMapNaviConfig alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapRouteConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapRouteConfig");
            }
        
            AMapRouteConfig* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[AMapRouteConfig alloc] init];
            } else {
                __this__ = [AMapRouteConfig alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapPOIConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapPOIConfig");
            }
        
            AMapPOIConfig* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[AMapPOIConfig alloc] init];
            } else {
                __this__ = [AMapPOIConfig alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::createAMapServices": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"ObjectFactory::createAMapServices");
            }
        
            AMapServices* __this__;
            if ([((NSDictionary<NSString*, id>*) args)[@"init"] boolValue]) {
                __this__ = [[AMapServices alloc] init];
            } else {
                __this__ = [AMapServices alloc];
            }
        
            methodResult(__this__);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapURLSearch": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapURLSearch* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapURLSearch alloc] init];
                } else {
                    __this__ = [AMapURLSearch alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapNaviConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapNaviConfig* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapNaviConfig alloc] init];
                } else {
                    __this__ = [AMapNaviConfig alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapRouteConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapRouteConfig* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapRouteConfig alloc] init];
                } else {
                    __this__ = [AMapRouteConfig alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapPOIConfig": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapPOIConfig* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapPOIConfig alloc] init];
                } else {
                    __this__ = [AMapPOIConfig alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"ObjectFactory::create_batchAMapServices": ^(NSObject <FlutterPluginRegistrar> * registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray<NSObject*>* resultList = [NSMutableArray array];
        
            NSNumber* length = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"length"];
            NSNumber* init = (NSNumber*) ((NSDictionary<NSString*, NSObject*>*) argsBatch)[@"init"];
            for (NSUInteger __i__ = 0; __i__ < [length integerValue]; __i__++) {
                AMapServices* __this__;
                if ([init boolValue]) {
                    __this__ = [[AMapServices alloc] init];
                } else {
                    __this__ = [AMapServices alloc];
                }
                [resultList addObject:__this__];
            }
        
            methodResult(resultList);
        
            if (enableLog) NSLog(@"HEAP: %@", HEAP);
        },
        
        @"AMapEmptyStringIfNil::AMapEmptyStringIfNil": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapEmptyStringIfNil::AMapEmptyStringIfNil(%@)", args);
            }
        
            // args
            // jsonable arg
            NSString* s = (NSString*) args[@"s"];
        
            // ref
        
        
            // invoke native method
            NSString* result = AMapEmptyStringIfNil(s);
        
            // result
            // 返回值: jsonable
            id __result__ = result;
        
            methodResult(__result__);
        },
        @"AMapCoordinateConvert::AMapCoordinateConvert": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapCoordinateConvert::AMapCoordinateConvert(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            if (coordinateValue != nil && (NSNull*) coordinateValue != [NSNull null]) {
              [coordinateValue getValue:&coordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"coordinate不能为null"]);
              return;
            }
        
            // enum arg
            AMapCoordinateType type = (AMapCoordinateType) [args[@"type"] integerValue];
        
            // ref
        
        
            // invoke native method
            CLLocationCoordinate2D result = AMapCoordinateConvert(coordinate, type);
        
            // result
            // 返回值: 结构体
            NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
            methodResult(__result__);
        },
        @"AMapDataAvailableForCoordinate::AMapDataAvailableForCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            if (enableLog) {
                NSLog(@"fluttify-objc: AMapDataAvailableForCoordinate::AMapDataAvailableForCoordinate(%@)", args);
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            if (coordinateValue != nil && (NSNull*) coordinateValue != [NSNull null]) {
              [coordinateValue getValue:&coordinate];
            } else {
              methodResult([FlutterError errorWithCode:@"参数非法"
                                               message:@"参数非法"
                                               details:@"coordinate不能为null"]);
              return;
            }
        
        
            // ref
        
        
            // invoke native method
            BOOL result = AMapDataAvailableForCoordinate(coordinate);
        
            // result
            // 返回值: Value
            NSObject* __result__ = @(result);
        
            methodResult(__result__);
        },
    };
}

@end
